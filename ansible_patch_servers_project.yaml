---
- name: Patch Management Playbook for Linux Servers
  hosts: all
  serial: "100%"  # Patch all servers simultaneously
  become: yes
  gather_facts: yes

  vars:
    mail_host: "vpce-0e6557fb0149b371d-er2zr5xw.email-smtp.eu-west-1.vpce.amazonaws.com"
    mail_port: 587
    mail_username: "AKIAR5NOPAKUE6RXK6O6"
    mail_password: "BPNpuSOlBJh7Ci0Ri/4pZH9uCilO70RzW5n+tkGlP5k6"
    mail_from: "ansible@pl.co.za"
    mail_to: "leon.booysen@pl.co.za"
    success_servers: []
    failed_servers: []

  pre_tasks:
    - name: Create results directory
      file:
        path: "/tmp/patch_results"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

    - name: Initialize patch status
      set_fact:
        patch_status: "started"
      run_once: true

  tasks:
    - name: Check if server is reachable
      ping:
      register: ping_result
      ignore_errors: yes

    - name: Set server status based on ping
      set_fact:
        server_status: "{{ 'reachable' if ping_result is success else 'unreachable' }}"

    - block:
        - name: Update package cache (Amazon Linux/RedHat)
          package_facts:
          when: ansible_os_family == "RedHat"

        - name: Update package cache (Ubuntu/Debian)
          apt:
            update_cache: yes
          when: ansible_os_family == "Debian"

        #- name: Update package cache (SUSE)
        #  zypper:
        #    update_cache: yes
        #  when: ansible_os_family == "Suse"

        - name: Check current Amazon Linux version
          shell: cat /etc/system-release
          register: amazon_release
          when: ansible_distribution == "Amazon"

        - name: Upgrade Amazon Linux to latest release
          shell: |
            sudo yum update -y
            if command -v dnf &> /dev/null; then
              sudo dnf upgrade -y
            else
              sudo yum upgrade -y
            fi
          args:
          when: ansible_distribution == "Amazon"
          register: amazon_upgrade

        - name: Perform system updates (RedHat)
          yum:
            name: "*"
            state: latest
            update_cache: yes
          when: ansible_os_family == "RedHat" and ansible_distribution != "Amazon"

        - name: Perform system updates (Ubuntu/Debian)
          apt:
            upgrade: dist
            update_cache: yes
          when: ansible_os_family == "Debian"

        - name: Perform system updates (SUSE)
          zypper:
            name: "*"
            state: latest
          when: ansible_os_family == "Suse"

        - name: Check if reboot is required
          stat:
            path: /var/run/reboot-required
          register: reboot_required_file
          when: ansible_os_family == "Debian"

        - name: Check if reboot is required (RedHat/SUSE)
          shell: |
            if [ -f /var/run/reboot-required ]; then
              echo "true"
            elif needs-restarting -r > /dev/null 2>&1; then
              if [ $? -eq 1 ]; then
                echo "true"
              else
                echo "false"
              fi
            else
              echo "unknown"
            fi
          register: reboot_required_rh
          when: ansible_os_family == "RedHat" or ansible_os_family == "Suse"

        - name: Set reboot required fact
          set_fact:
            #reboot_required: "{{ true if reboot_required_file.stat.exists else (true if reboot_required_rh.stdout == 'true' else false) }}"
            #reboot_required: "true"
            reboot_required: "false"

        - name: Save pre-patch package versions
          shell: |
            if command -v rpm &> /dev/null; then
              rpm -qa --queryformat '%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n' | sort > /tmp/pre_patch_packages.txt
            elif command -v dpkg &> /dev/null; then
              dpkg-query -W -f='${Package}-${Version}-${Architecture}\n' | sort > /tmp/pre_patch_packages.txt
            fi
          args:

      rescue:
        - name: Mark server as failed during patching
          set_fact:
            server_status: "patching_failed"

    - name: Reboot server if required
      ansible.builtin.reboot:
        msg: "Reboot triggered by Ansible for patching"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required | default(false)

    - name: Wait for server to come back online
      wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 600
      when: reboot_required | default(false)

    - name: Execute server-specific commands (conditional)
      block:
        - name: Run commands on MDS servers
          shell: "{{ item }}"
          with_items:
            - "sudo mkdir /MDS_SERVER || true"
          when: "'mds' in group_names"

        - name: Run commands on EWX servers
          shell: "{{ item }}"
          with_items:
            - "sudo mkdir /EWX_SERVER || true"
          when: "'ewx' in group_names"

        - name: Run commands on database servers
          shell: "{{ item }}"
          with_items:
            - "systemctl status mysql || systemctl status postgresql || systemctl status mariadb || true"
            - "mysql --version || psql --version || true"
          when: "'dbserver' in group_names"

        - name: Run commands on app servers
          shell: "{{ item }}"
          with_items:
            - "systemctl status tomcat || systemctl status wildfly || true"
            - "java -version || true"
          when: "'appserver' in group_names"

        - name: Run custom commands based on hostname
          shell: "echo 'Custom command executed on {{ inventory_hostname }}'"
          when: inventory_hostname is match(".*prod.*")

      when: server_status == "reachable"

    - name: Verify patches were applied
      block:
        - name: Save post-patch package versions
          shell: |
            if command -v rpm &> /dev/null; then
              rpm -qa --queryformat '%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n' | sort > /tmp/post_patch_packages.txt
            elif command -v dpkg &> /dev/null; then
              dpkg-query -W -f='${Package}-${Version}-${Architecture}\n' | sort > /tmp/post_patch_packages.txt
            fi
          args:

        - name: Compare package versions
          shell: |
            diff /tmp/pre_patch_packages.txt /tmp/post_patch_packages.txt || true
          register: package_diff
          args:

        - name: Set patch verification status
          set_fact:
            patches_applied: "{{ true if package_diff.stdout != '' else false }}"

        - name: Get kernel version (if updated)
          shell: uname -r
          register: kernel_version

        - name: Save verification results
          copy:
            content: |
              Host: {{ inventory_hostname }}
              OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
              Packages Updated: {{ patches_applied }}
              Kernel: {{ kernel_version.stdout }}
              Rebooted: {{ reboot_required | default(false) }}
              Status: SUCCESS
            dest: "/tmp/patch_results/{{ inventory_hostname }}_success.txt"
          delegate_to: localhost

      when: server_status == "reachable"


  handlers:
    - name: reboot server
      ansible.builtin.reboot:
        msg: "Reboot triggered by Ansible for patching"
        connect_timeout: 5
        reboot_timeout: 600

